fn IsMatchedParts parts txt = (
	result = true;
	for part in parts do (
		if (findString txt part == undefined)do(
			result = false
			exit
		)
	)
	result  
)
fn ReadAllText filepath = ( TextStream = openFile filepath mode:"r";result = readDelimitedString TextStream "";close TextStream;result)

fn GetArrayFromText filepath filtertxt: ToString:false = (
	result = (filterstring (ReadAllText filepath) "\n")
	if (filtertxt != unsupplied)do( for i = result.count to 1 by -1 do ( if (FindString result[i] filtertxt == undefined) do ( deleteItem result i) ) )
	if (ToString)do( txt = "" ; for l in result do ( txt += l ); result = txt; )
	result
)

fn GetEqualsSymbolValueFromText filepath name = ( reult = undefined; textLines = GetArrayFromText filepath; for l in textLines do ( data = FilterString l "="; if (data.count > 1)do( if (data[1] == name)do( reult = (substituteString data[2] "\n" "");exit  ) ) ); reult )
fn SetEqualsSymbolValue filepath name newValue AddAfter: = (IsChanged = false
	if (doesfileExist filepath)do(
		contents = GetArrayFromText filepath
		TextStream = openFile filepath mode:"w"
		txt = ""
		newLine = name +"="+ newValue
		for l in contents do (
			data = FilterString l "="
			if (data[1] == name)do (
				l=newLine
				IsChanged = true
				
			)
			txt += l + "\n"
		)
		if not IsChanged do (
			if (AddAfter == unsupplied)then( txt+=newLine+"\n" )
			else(
				case AddAfter of (
					#VALUES:(AddAfter = "/* VALUES */")
					#STRUCTURES:(AddAfter="/* CODE STRUCTURES */")
					#ATTRIBUTES:(AddAfter="/* CUSTOM ATTRIBUTES */")
					#CONTROLS:(AddAfter="/*MXS_CONTROLS*/")
					#EVENT:(AddAfter="EVENT HANDLERS */")
					default:()
				)
				txt = ""
				for i = 1 to contents.count do (
					curLine = contents[i]
					if (FindString curLine AddAfter !=undefined)do(						
						contents[i] = contents[i]+newLine
						
						print ("Add " +contents[i])						
					)
					txt+= contents[i]+"\n"
				)
			)
		)
		format "%" txt to:TextStream
		close TextStream
	)
)--ReplaceTextFileLine @"C:\Users\Yushi\Desktop\QQQ.txt" #(fn qq l = (if (findstring l "a" != undefined)do (l="QQQQQQQQQQQQQQ");l))

fn ConvertScriptToAbbreviation shortcutName txt: AddAfter: test:false = (--ConvertScriptToAbbreviation "testAbbrev" 
	if (txt == unsupplied)do (txt = getclipboardText())
	MXS_EditorAbbrev = (getdir #maxData )+"MXS_EditorAbbrev.properties"
	if (doesFileExist MXS_EditorAbbrev)do(
		txt = substituteString txt "\\" "\\\\"
		txt = substituteString txt "\n" "\\n"
		txt = substituteString txt "\t" "\\t"
		if test then (print (shortcutName+"="+txt))
		else( SetEqualsSymbolValue MXS_EditorAbbrev shortcutName txt AddAfter:AddAfter )
	)
	if not test do(
		edit ((getdir #maxData )+"MXS_EditorAbbrev.properties") 
		UpdateMXSEAbbrev = @"F:\MyWork\MaxExtend\WIP\UpdateMXSEAbbrev.ahk"
		if (doesFileExist UpdateMXSEAbbrev)do(shellLaunch UpdateMXSEAbbrev "")
	)	
	OK
)

