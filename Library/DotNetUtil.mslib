
--General
Local Enum = dotNetClass "System.Enum"
Local Environment = dotnetclass "System.Environment"
Local SpecialFolder = dotnetclass "System.Environment+SpecialFolder"
Local DesktopPath = Environment.GetFolderPath SpecialFolder.Desktop
Local SystemSounds = dotnetclass "System.Media.SystemSounds"
fn dnIntPtr param = ( (DotNetObject "System.IntPtr" param) )
Local StringFormat = (dotnetclass "System.String").Format
fn ToString num formate = ( (DotNetObject "System.Single" num).ToString("0.00")as float )
-- IO
fn SystemIO className = (dotnetclass ("System.IO."+className))
Local dnFile = SystemIO "File"
Local dnPath = SystemIO "Path"
Local dnDirectory = SystemIO "Directory"
Local dnFileAttributes = SystemIO "FileAttributes"
--Compiler Related
fn CompileCSharp path &Assembly: = ( result = undefined
	if (doesFileExist path)do(
		ClassName = getfilenamefile path
		code = dnFile.ReadAllText path
		CSharpCodeProvider = dotnetobject "Microsoft.CSharp.CSharpCodeProvider"
		CompilerParameters = dotnetobject "System.CodeDom.Compiler.CompilerParameters"
		codeLines = FilterString code "\n"
		nameSpaces = for l in codeLines where (findstring l "using" != undefined)collect( ((filterstring l " ;\n")[2]+".dll"))		
		CompilerParameters.ReferencedAssemblies.AddRange nameSpaces
		CompilerParameters.GenerateInMemory = true
		CompilerResults = CSharpCodeProvider.CompileAssemblyFromSource CompilerParameters #(code)
		if not (Assembly == unsupplied) do (Assembly =  CompilerResults.CompiledAssembly)			
		result = CompilerResults.CompiledAssembly.CreateInstance ClassName		
	)
	result
	
)dotNet.loadAssembly
	--XML
Local XmlConvert = dotnetclass "System.Xml.XmlConvert"
fn IsValidXMLName txt = ( try( XmlConvert.VerifyName txt;true )catch( false ) )
fn FilterInValidXMLChar txt = ( result = "";for i = 1 to txt.count do ( if (IsValidXMLName txt[i] )do( result += txt[i] ) );result)
	--Color
Local dnColor = dotNetClass "System.Drawing.Color"
fn GetColorManDotNetColor tag = ( c = (( colorman.getColor tag )*255) as color (dnColor.fromARGB c.r c.g c.b))
Local dnColorTranslator = dotnetclass "System.Drawing.ColorTranslator"
fn ColorToHtml c default:(dnColor.black) = ( (try(dnColorTranslator.ToHtml (dnColor.FromArgb c.a c.r c.g c.b))catch(dnColorTranslator.ToHtml default )) )
fn ColorFromHtml hexColor = (
	c = try(dnColorTranslator.FromHtml hexColor)catch( print ("convert "+hexColor as string +"fail");dnColor.black);
	result = (color c.r c.g c.b c.a)	
	result 
)
--	Windows.Forms Class
fn WinForm name = ( (dotnetclass ("System.Windows.Forms."+name)) )
Local dnFlatStyle = Winform "FlatStyle"
Local dnTreeNode = WinForm "TreeNode"
Local HorizontalAlignment = WinForm "HorizontalAlignment"
Local TextFormatFlags = WinForm "TextFormatFlags"
-- System.Drawing	
fn SystemDrawing name = ( (dotnetClass ("System.Drawing."+name) ) )	
Local dnBrushes = SystemDrawing "Brushes"
Local dnPens = SystemDrawing "Pens"
Local dnStringFormat = SystemDrawing "StringFormat"
Local dnStringAlignment = SystemDrawing "StringAlignment"

-- Texture
Local dnImageList = WinForm "ImageList"
Local dnImage = SystemDrawing "Image"
-- Input 
Local dnMouseButtons = WinForm "MouseButtons"
Local MouseMiddle = dnMouseButtons.Middle
Local MouseLeft = dnMouseButtons.Left
Local MouseRight = dnMouseButtons.Right
Local WinFormControl = WinForm "Control"
Local dnKeys = WinForm "keys"
Local dnCursors = WinForm "Cursors"
Local Ctrl = dnKeys.Control
Local Alt = dnKeys.Alt
Local Shift = dnKeys.Shift
	-- Windows.Forms DotNetObject
fn dnSolidBrush colorParm =  (dotNetObject "System.Drawing.SolidBrush" colorParm)
fn dnConvert obj type = (((dotNetClass "System.Convert").ChangeType obj type))
fn dnRectangle x y w h = (dotnetobject "System.Drawing.Rectangle" x y w h)
fn dnRectangleF x y w h = (dotnetobject "System.Drawing.RectangleF" x y w h)
fn dnPoint x y = (dotnetobject "System.Drawing.Point" x y)
fn dnFont style size = (dotnetobject "System.Drawing.Font" style size)

	
	
fn LoadDll dllpath prompt:true = (
	LoadSucceed = classof (try(dotnet.loadAssembly dllpath)catch(false)) == dotNetObject
	if (LoadSucceed)then( print ("LoadAssembly ["+(dllpath as string)+"] Succeed ! ") )
	else (
		warnningInfo = "LoadAssembly ["+(dllpath as string)+"] failed... "
		if (prompt)then(messageBox warnningInfo)else(print warnningInfo)
	)
	LoadSucceed
)
fn ScanningLoadDll name curLocation: previouseLocation: searchpattern:"*" Recursively:false scanning:false prompt:true = ( result = undefined
	if (curLocation == unsupplied)do (curLocation = getfilenamepath (getThisScriptFilename()) )
	if (curLocation[curLocation.count] != "\\" ) do ( curLocation += "\\")		
	if ( doesFileExist (curLocation + name) )then( result = curLocation + name )else(
		dir_array = GetDirectories (curLocation+"\\"+searchpattern)
		for d in dir_array do (
			if (doesFileExist (d+name) )then( result = d + name; exit;
			)else if (Recursively and (previouseLocation == unsupplied or ( findstring d previouseLocation == undefined) ))do(
				join dir_array (GetDirectories (d+"/*"))  ) 
		)
		if (result == undefined)do( nextLocation  = pathConfig.removePathLeaf curLocation 
			if (doesDirectoryExist nextLocation and not (pathConfig.isRootPath (nextLocation+"\\")) )do(
					result = ScanningLoadDll name curLocation:(nextLocation+"\\") previouseLocation:curLocation scanning:true
			)
		)
	)
	if (scanning == false )do(
		if (result != undefined )then( result = LoadDll result prompt:prompt )
		else(result = false)	
	)
	result
)
fn LoadDotNetClass classname DllName: curLocation: prompt:true = (
	result = dotNetClass classname
	if (result  == undefined) do (
		if (DllName == unsupplied)do(DllName = (filterstring classname ".")[1] +".dll")		
		if (ScanningLoadDll dllName curLocation:curLocation prompt:prompt )do( result = dotNetClass classname ) 
	)
	result
)
fn ShowSelectFilesDialog title InitialPath:sysinfo.currentdir Types:#() ShowCheckWarrn:false DialogStyle:#Open FileOK: = (
	if (FileOK != unsupplied)do(
		DialogClass = "System.Windows.Forms.OpenFileDialog"
		if (DialogStyle == #Save)do( DialogClass = "System.Windows.Forms.SaveFileDialog" )
		theDialog = dotNetObject DialogClass			
		theDialog.title = title
		theDialog.InitialDirectory = getfilenamepath InitialPath
		theDialog.CheckFileExists = ShowCheckWarrn
		theDialog.CheckPathExists = ShowCheckWarrn
		theDialog.RestoreDirectory = false
		AdditionalfilterString = ""
		for item in types do ( AdditionalfilterString += (toUpper item) + " Files (*."+ (toLower item)+")|*."+(toLower item)+"|" )
		theDialog.fileName = getfilenamefile InitialPath
		theDialog.Filter = AdditionalfilterString+"All Files (*.*)|*.*"
		theDialog.FilterIndex = 0
		dotNet.addEventHandler theDialog "FileOK" FileOK
		theDialog.showDialog()
	)
)
fn GetDotNetMaxForeColor = (
		result = ( ( colorman.getColor #text )*255 ) as color
		result = dnColor.fromARGB result.r result.g result.b
		result
)
fn GetDotNetMaxBackColor = (
		result = ( ( colorman.getColor #background )*255 ) as color
		result = dnColor.fromARGB result.r result.g result.b
		result
)

fn SetDotNetControlColor dnControls backcolor: forecolor: Children:false FlatStyle:dnFlatStyle.Standard = (
	if (backcolor == unsupplied) do ( backcolor = GetDotNetMaxBackColor() )
	if (forecolor == unsupplied) do ( forecolor = GetDotNetMaxForeColor() )
	if (classof dnControls != Array)do( dnControls = #(dnControls) )
	for c in dnControls do (
		if (c == dotNetObject or classof c == dotNetControl)then(
			 --and (c.gettype()).IsSubclassOf WinFormControl 
-- 			print c.name
			if (hasProperty c "backcolor")do(c.backcolor = backcolor)
			if (hasProperty c "forecolor")do( c.forecolor = forecolor)			
			if (hasProperty c "FlatStyle")do( c.FlatStyle = FlatStyle; )
			if (Children and c.Controls.count > 0)do(
				LastIndex = c.Controls.count-1;
				for i = 0 to LastIndex do( SetDotNetControlColor c.Controls.item[i] Children:Children )
			)
			c.Invalidate()
		)
	)
)
fn SetRolloutDotNetControlsColor target  backcolor: forecolor: Children:false FlatStyle:dnFlatStyle.System = ( for c in target.controls do ( if (classof c == dotNetControl) do (SetDotNetControlColor c backcolor:backcolor forecolor:forecolor Children:true FlatStyle:FlatStyle) ) )
fn SelectFolderDialog hwnd InitialPath:sysinfo.currentdir = (
	if (classof hwnd == RolloutClass)do(hwnd = hwnd.hwnd)
	result = ""
	SelectionDialogClass = LoadDotNetClass "SelectionDialogUtility.SelectFolderDialog" prompt:false
	if (SelectionDialogClass != undefined)then( result = SelectionDialogClass.selectfolder (dnIntPtr hwnd) InitialPath )
	else (result = getSavePath caption:"Select Folder" initialDir:InitialPath )
	if (result == undefined)do(result = "")
	result
)
struct FloatTextBox 
(	
	--Initalize Paramaters
	owner = undefined,
	TextAlign = HorizontalAlignment.Left,
	BeginEditEvents = #(),
	EndEditEvents = #(),
	--Construct
	textbox = this .init(),
	fn BeginEdit txt pos offset:[2,1] = (
		textbox.text = txt
		textbox.width = (getTextExtent txt).x+10
		textbox.location.x = pos.x+offset.x
		textbox.location.y = pos.y+offset.y
		textbox.Enabled = textbox.Visible = true
		textbox.focus()
		for beginEvent in BeginEditEvents do ( if (classOf beginEvent == MAXScriptFunction)do( beginEvent s:textbox sender:textbox ) )
	),
	fn EndEdit = (		
		for endEvent in BeginEditEvents do ( if (classOf beginEvent == MAXScriptFunction)do( endEvent s:textbox sender:textbox ) )
	),
	fn init = (
		result = undefined
		if (owner== undefined)then(
			print "Undefined owner"
		)else(
			result = dotNetObject "System.Windows.Forms.TextBox"
			result.tag = dotnetmxsvalue this
			owner.Controls.add result
			result.TextAlign = TextAlign
			result.Enabled = result.Visible = false
			result.borderstyle = result.borderstyle.none
			dotNet.addEventHandler result "KeyUp" (fn FloatTextBoxKeyDown s e = (
				k = e.keycode
				case e.keycode of (
					(k.Escape): (s.parent.focus()	)					
				)
			))
			dotNet.addEventHandler result "LostFocus" (fn CloseFloatTextBox s e = ( s.tag.value.EndEdit(); s.Enabled = s.Visible  = false;s.Invalidate() ))
		)
		result
	)
)